import argparse, os

def add_arguments(parser):

    parser.add_argument("-A", "--auto", dest="auto", help="run in auto mode online monitoring",default=False,action='store_true')
    parser.add_argument("--Nupdate", dest="Nupdate", help="frequence of updating online plots",default=100,type=int)
    parser.add_argument("--Nlast",      dest="Nlast", help="last N events to analyze on file",default=10,type=int)
    parser.add_argument("--Cosmics",      dest="cosmics", help="use default data stream if no beam",action='store_true',default=False)
    parser.add_argument("--sudo", dest="sudo", help="update files on EOS",default=False,action='store_true')

    parser.add_argument("-M", "--online", dest="online", help="online mode",default=False,action='store_true')
    parser.add_argument("--batch", dest="batch", help="batch mode",default=False,action='store_true')
    parser.add_argument("--server", dest="server", help="xrootd server",default=os.environ["EOSSHIP"])
    parser.add_argument("-r", "--runNumber", dest="runNumber", help="run number", type=int,default=-1)
    parser.add_argument('-p', '--path', dest='path', help='path', default='./', type=str)
    parser.add_argument("-P", "--partition", dest="partition", help="partition of data", type=int,required=False,default=-1)
    parser.add_argument("-d", "--debug", dest="debug", help="debug", type=int, default=False)
    parser.add_argument("-cpp", "--convRawCPP", action='store_true', dest="FairTask_convRaw", help="convert raw data using ConvRawData FairTask", default=False)
    parser.add_argument( "--withCalibration", action='store_true', dest="makeCalibration", help="make QDC and TDC calibration, not taking from raw data", default=False)
    parser.add_argument("--customEventChain", dest="customEventChain", action="store_true")

    parser.add_argument("-f", "--inputFile", dest="fname", help="file name for MC", type=str,default=None,required=False)
    parser.add_argument("-g", "--geoFile", dest="geoFile", help="geofile", required=False,default=False)
    parser.add_argument("-b", "--heartBeat", dest="heartBeat", help="heart beat", default=10000,type=int)
    parser.add_argument("-c", "--command", dest="command", help="command", default="")
    parser.add_argument("-n", "--nEvents", dest="nEvents", help="number of events", default=-1,type=int)
    parser.add_argument("-s", "--nStart", dest="nStart", help="first event", default=0,type=int)
    parser.add_argument("-t", "--trackType", dest="trackType", help="DS or Scifi", default="DS")
    parser.add_argument("--CorrectionType", dest="CorrectionType", help="Type of polynomial function or log function", default=5, type=int, required=False)
    parser.add_argument("--Task", dest="Task", help="TimeWalk or SelectionCriteria", default="TimeWalk")
    parser.add_argument("--nStations", dest="nStations", help="How many DS planes are used in the DS track fit", type=int, default=3)
    parser.add_argument("--TWCorrectionRun", dest="TWCorrectionRun", help="Select what run to take TW correction parameters from. By default it is the same as the data", type=str, default='005408')
    parser.add_argument("--AlignmentRun", dest="AlignmentRun", help="AlignmentRun", type=int)
    parser.add_argument('-D', '--datalocation', dest='datalocation', type=str, default='physics')
    parser.add_argument('--state', dest='state', type=str, default='uncorrected')
    parser.add_argument('--referencesystem', dest='referencesystem', type=int, default=3)

    # Cuts
    parser.add_argument('--OneHitPerSystem', dest='OneHitPerSystem', action='store_true')
    parser.add_argument('--SlopesCut', dest='SlopesCut', action='store_true')
    parser.add_argument('--nSiPMsCut', dest='nSiPMsCut', action='store_true')
    parser.add_argument('--XT', dest='XT', action='store_true')

    # parser.add_argument('--afswork', dest='afswork', type=str, default='/afs/cern.ch/work/a/aconsnd/Timing')
    parser.add_argument('--eos', dest='afswork', type=str, default='/afs/cern.ch/user/t/tismith')
    parser.add_argument('--afsuser', dest='afsuser', type=str, default='/afs/cern.ch/user/a/aconsnd/Timing')
    parser.add_argument('--eosH8', dest='eosH8', type=str, default='/eos/experiment/sndlhc/convertedData/commissioning/TB_H8_october/')
    parser.add_argument('--eosTI18', dest='eosTI18', type=str, default='/eos/experiment/sndlhc/convertedData/commissioning/TI18/')
    parser.add_argument('--mode', dest='mode', type=str, default='zeroth')
    parser.add_argument('-C', '--HTCondor', dest='HTCondor', help='int (0/1), is on HTCondor?', default=0, type=int, required=False)
    parser.add_argument('--numusignalevents', dest='numusignalevents', action='store_true')
    parser.add_argument('--signalpartitions', dest='signalpartitions', required=False)
    parser.add_argument('--numuStudy', dest='numuStudy', action='store_true')
    parser.add_argument('--simulation', dest='simulation', action='store_true')
    parser.add_argument('--simMode', dest='simMode', type=str)
    parser.add_argument('--simTest', dest='simTest', action='store_true')
    parser.add_argument('--OutgoingMuon', dest='OutgoingMuon', type=str, default='all')
    parser.add_argument('--allFiles', dest='allFiles', action='store_true')

    parser.add_argument("--ScifiNbinsRes", dest="ScifiNbinsRes", default=100)
    parser.add_argument("--Scifixmin", dest="Scifixmin", default=-2000.)
    parser.add_argument("--ScifialignPar", dest="ScifialignPar", default=False)
    parser.add_argument("--ScifiResUnbiased", dest="ScifiResUnbiased", default=False)
    parser.add_argument("--Mufixmin", dest="Mufixmin", default=-10.)
    parser.add_argument("--chi2xpred_zpos", dest="chi2xpred_zpos", help="z-position for plotting DS track red-chi2 values", type=int, default=0)
    parser.add_argument("--WriteOutTrackInfo", dest="WriteOutTrackInfo", type=int, default=0)
    parser.add_argument('--numbering', dest='numbering', type=str, default='systemPCB')

    parser.add_argument("--goodEvents", dest="goodEvents", action='store_true',default=False)
    parser.add_argument("--withTrack", dest="withTrack", action='store_true',default=False)
    parser.add_argument("--nTracks", dest="nTracks",default=0,type=int)
    parser.add_argument("--save", dest="save", action='store_true',default=False)
    parser.add_argument("--interactive", dest="interactive", action='store_true',default=False)

    parser.add_argument("--postScale", dest="postScale",help="post scale events, 1..10..100", default=-1,type=int)  